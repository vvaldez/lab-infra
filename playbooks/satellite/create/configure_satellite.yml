- name: Configure Satellite
  hosts: satellite
  gather_facts: yes

  tasks:
    #########################
    # Import manifest
    #########################

    - name: Check for existing manifest
      theforeman.foreman.resource_info:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        resource: subscriptions
        organization: "{{ satellite.organization }}"
      delegate_to: localhost
      register: manifest
      tags:
        - manifest
        - activation-keys

    - block:
      # This is ugly but need to figure out how to address this for Tower use case. manifest_path does not take remote url
      - name: Obtain manifest
        get_url:
          dest: "{{ satellite.manifest.temp_dir.strip('/') }}/{{ satellite.manifest.filename }}"
          url: "{{ satellite.manifest.remote_prefix.strip('/') }}/{{ satellite.manifest.filename }}"

      - name: Import manifest
        theforeman.foreman.subscription_manifest:
          username: "{{ satellite.admin_username }}"
          password: "{{ satellite.admin_password }}"
          server_url: "{{ satellite.server_url }}"
          validate_certs: no
          organization: "{{ satellite.organization }}"
          manifest_path: "{{ satellite.manifest.temp_dir.strip('/') }}/{{ satellite.manifest.filename }}"
          state: "{{ satellite.manifest.state }}"
      delegate_to: localhost
      when: ( manifest.resources | length ) == 0
      tags:
        - manifest

    ############################
    # Refresh manifest
    ############################
    - name: Refresh manifest
      theforeman.foreman.subscription_manifest:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        state: refreshed
      delegate_to: localhost
      tags:
        - manifest

    #########################
    # Create osp16_containers product
    #########################

    - name: Create product for OpenStack containers
      theforeman.foreman.product:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        name: "{{ item.product }}"
        state: present
      loop: "{{ container_images | flatten | list }}"
      delegate_to: localhost
      tags:
        - products

    #########################
    # Create container repositories defined in each content view
    #########################

    - name: Create repositories for container images
      theforeman.foreman.repository:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        name: "{{ item[1].name.split('/') | last | replace('openstack-', '') | replace('*/','') }}"
        product: "{{ item[0].product }}"
        content_type: docker
        url: "{{ satellite.container_registry_url }}"
        docker_upstream_name: "{{ item[1].name }}"
        upstream_username: "{{ satellite.container_registry_upstream_username }}"
        upstream_password: "{{ satellite.container_registry_upstream_password }}"
        state: present_with_defaults
      loop: "{{ lookup('subelements', container_images, 'images') }}"
      delegate_to: localhost
      tags:
        - containers
      notify: sync products


    #########################
    # Create repository sets
    #########################

    - name: Enable repository sets with releasevers and basearch
      theforeman.foreman.repository_set:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        label: "{{ item.label }}"
        all_repositories: no
        repositories:
        - releasever: "{{ item.releasever }}"
          basearch: "{{ item.basearch }}"
      loop: "{{ satellite.repository_sets }}"
      when: '"basearch" in item'
      delegate_to: localhost
      tags:
        - repository-sets

    - name: Enable repository sets with releasevers
      theforeman.foreman.repository_set:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        label: "{{ item.label }}"
        all_repositories: no
        repositories:
        - releasever: "{{ item.releasever }}"
      loop: "{{ satellite.repository_sets }}"
      when: '"releasever" in item and "basearch" not in item'
      delegate_to: localhost
      tags:
        - repository-sets

    - name: Enable repository sets without releasevers
      theforeman.foreman.repository_set:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        label: "{{ item.label }}"
        all_repositories: yes
      loop: "{{ satellite.repository_sets }}"
      when: '"releasever" not in item'
      delegate_to: localhost
      tags:
        - repository-sets

    #########################
    # Create sync plan and assign the created repository sets above to it
    #########################

    - name: Get all products
      theforeman.foreman.resource_info:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        resource: products
        organization: "{{ satellite.organization }}"
      register: products
      delegate_to: localhost
      tags:
        - sync-plan

    - name: Add products with repositories enabled to sync-list
      set_fact:
        sync_list: "{{ sync_list|default([]) + [ item.name ] }}"
      loop: "{{ products.resources }}"
      when: item.repository_count > 0
      delegate_to: localhost
      tags:
        - sync-plan

    # todo: still not idempotent, fix and uncomment notify
    - name: Create or update nightly sync plan for all products containing a repository
      theforeman.foreman.sync_plan:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        name: Nightly
        description: Nightly
        interval: daily
        enabled: true
        # intentionally set this to the first day of 2020 to keep the module
        # from registering a change on every run
        sync_date: "01/01/2020 05:00:00 UTC"
        products: "{{ sync_list }}"
        state: present
      delegate_to: localhost
      tags:
        - sync-plan
      notify: sync products

    - name: Force all notified handlers at this point, to publish sync repos if necessary
      meta: flush_handlers
      tags:
        - sync-plan


    #########################
    # Create lifecycle environments
    #########################

    - name: Add lifecycle environment
      theforeman.foreman.lifecycle_environment:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        name: "{{ item.name }}"
        label: "{{ item.name }}"
        prior: "{{ item.prior }}"
        description: "{{ item.description }}"
        state: "present"
      loop: "{{ satellite.lifecycle_environments }}"
      delegate_to: localhost
      tags:
        - lifecycle-environments
      when: "'lifecycle_environments' in satellite"


    #########################
    # Create all content views and add their repositories
    #########################

    - name: Create any new content views and add repos
      theforeman.foreman.content_view:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        name: "{{ item.name }}"
      loop: "{{ satellite.content_views }}"
      delegate_to: localhost
      tags:
       - content-views
      register: create_content_views
      notify: publish new content view

    - name: pull info from registries
      theforeman.foreman.resource_info:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        resource: repositories
        organization: "{{ satellite.organization }}"
      delegate_to: localhost
      tags:
        - content-views
      register: registries

    - name: join containers for container_product_name to container_list
      set_fact:
        container_list: "{{ container_list|default([]) + [ {'name': item.name}| combine({'product': item.product.name}) ] }}"
      loop: "{{ registries.resources }}"
      when: "{{ item.product.name == satellite.container_product_name }}"
      delegate_to: localhost
      tags:
        - content-views

    - name: Add repos to existing content views
      theforeman.foreman.content_view:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        name: "{{ item.name }}"
        repositories: "{{ item.repositories.yum + container_list }}"
      loop: "{{ satellite.content_views }}"
      delegate_to: localhost
      tags:
       - content-views
      register: update_content_views
      notify: update exiting content view

    - name: Force all notified handlers at this point, to publish content views if necessary
      meta: flush_handlers
      tags:
        - content-views

    #########################
    # Default content view publish??
    #########################

    # - name: "Publish a content view, not idempotent"
    #   theforeman.foreman.content_view_version:
    #     username: "{{ satellite.admin_username }}"
    #     password: "{{ satellite.admin_password }}"
    #     server_url: "{{ satellite.server_url }}"
    #     validate_certs: no
    #     organization: "{{ satellite.organization }}"
    #     content_view: "{{ item.name }}"
    #   loop:



    #########################
    # Create activation keys
    #########################


    - block:
      - name: Create client activation key
        theforeman.foreman.activation_key:
          username: "{{ satellite.admin_username }}"
          password: "{{ satellite.admin_password }}"
          server_url: "{{ satellite.server_url }}"
          validate_certs: no
          organization: "{{ satellite.organization }}"
          name: "{{ item.name }}"
          lifecycle_environment: "{{ item.lifecycle_environment }}"
          content_view: "{{ item.content_view }}"
          subscriptions: "{{ item.subscriptions }}"
          content_overrides: "{{ item.content_overrides }}"
          auto_attach: False
          release_version: "{{ item.releasever }}"
        delegate_to: localhost
        tags:
          - activation-keys
        loop: "{{ satellite.activation_keys }}"
        when: "'activation_keys' in satellite"

      rescue:
      - name: report error
        set_fact:
          pool_error_msg: |
              There was a failure while creating activation keys.
              This is often related to incorrect Pool IDs.
              Please review the output below and update the Pool Ids in
              the Inventory in the Activation Keys section to use these values.
              Then re-run this playbook with --tags activation-keys
        delegate_to: localhost
        tags:
          - activation-keys

      - name: get pool IDs
        set_fact:
          pool_ids: "{{ pool_ids| default([])  + [ item.name + ' -> ' + item.cp_id ] }}"
        delegate_to: localhost
        loop: "{{ manifest.resources }}"
        tags:
          - activation-keys

      - fail:
          msg:
            - "{{ pool_error_msg }}"
            - "{{ pool_ids }}"
        tags:
          - activation-keys
  handlers:

    - name: Publish new content view - all Lifecycle envs
      theforeman.foreman.content_view_version:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        content_view: "{{ item.item.name }}"
        lifecycle_environments: "{{ satellite.lifecycle_environments | map(attribute='name') | list }}"
      delegate_to: localhost
      loop: "{{ create_content_views.results }}"
      when: item.changed
      listen: publish new content view

    - name: Update existing content view - only to Library
      theforeman.foreman.content_view_version:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        content_view: "{{ item.item.name }}"
        lifecycle_environments: "Library"
      delegate_to: localhost
      loop: "{{ update_content_views.results }}"
      loop_control:
        index_var: index
      when:
        - item.changed
        - not create_content_views.results[index].changed
      listen: update exiting content view

    - name: If we added products to the nightly sync task we should sync them now
      theforeman.foreman.repository_sync:
        username: "{{ satellite.admin_username }}"
        password: "{{ satellite.admin_password }}"
        server_url: "{{ satellite.server_url }}"
        validate_certs: no
        organization: "{{ satellite.organization }}"
        product: "{{ item }}"
      loop: "{{ sync_list }}"
      delegate_to: localhost
      register: sync_status
      until: sync_status.changed == true
      retries: 5
      listen: sync products

