#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512
firstboot --disable
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

eula --agreed
text
reboot

{% for ssh_key in ssh_keys %}
sshkey --username={{ ansible_user }} "{{ ssh_key }}"
{% endfor %}

url --url="{{ install.url['rhel' + hostvars[iso_hostname].os.version.major] }}"

# Disk information
%include /tmp/disk.ks

# Network information
%include /tmp/network.ks

# Root password
rootpw --iscrypted {{ install.password }}
# System services
services --enabled="chronyd"
# System timezone
timezone America/New_York --isUtc

%pre --log=/tmp/kickstart-pre-install.log
#!/bin/sh

# Process kernel cmdline to see if what was passed to ip= bond= and vlan= so all of these can be processed 
# Looking for boot options as describd here: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/installation_guide/chap-anaconda-boot-options
#  bond=bond0:em1,em2:mode=802.3ad vlan=vlan118:bond0 ip=192.168.118.33::192.168.118.254:255.255.255.0:myhost.example.com:vlan118:none nameserver=8.8.8.8

#raw
# Get the kernel parameters
kparams=$(cat /proc/cmdline)
# Create array with parameters
kp_list=(${kparams// / })
for p in "${kp_list[@]}"
do
  case $p in
    ip*)
      ip_list=(${p//ip=/})
      ip_list=(${ip_list//:/ })
      ;;
    bond*)
      bond_list=(${p//bond=/})
      bond_list=(${bond_list//:/ })
      ;;
    vlan*)
      vlan_list=(${p//vlan=/})
      vlan_list=(${vlan_list//:/ })
      ;;
    nameserver*)
      ns_list=(${p//nameserver=/})
      ;;
    os_device*)
      os_device=${p//os_device=/}
      ;;
  esac
done

echo "INFO: variables passed in:"
echo "kparams: ${kp_list[@]}"
echo "ip: ${ip_list[@]}"
echo "    addr: ${ip_list[0]}"
echo "    gateway: ${ip_list[2]}"
echo "    netmask: ${ip_list[3]}"
echo "    hostname: ${ip_list[4]}"
echo "nameserver: ${ns_list[@]}"
echo "bond: ${bond_list[@]}"
echo "    interface: ${bond_list[0]}"
echo "    members: ${bond_list[1]}"
echo "    options: ${bond_list[2]}"
echo "vlan: ${vlan_list[@]}"
echo "    id: ${vlan_list[0]//vlan/}"
echo "os_device: ${os_device}"

if [ -z "${ip_list[0]}" ]
then
  # If not ip= parameter sent, use dhcp
  # TODO: for non-specified bond slaves, em1 and em2 are assumed, and mode=802.3ad - these should be dynamic instead
  cat <<EOF > /tmp/network.ks
network  --bootproto=dhcp --device=bond0 --onboot=on --noipv4 --noipv6 --activate --bondslaves=em2,em1 --bondopts=downdelay=0,miimon=1,mode=802.3ad,updelay=0
network  --bootproto=dhcp --device=bond0 --onboot=on --noipv6 --activate --vlanid=118 --interfacename=vlan118
network  --hostname=localhost.localdomain
EOF
else
  # Use information passed to installer to configure network
  cat <<EOF > /tmp/network.ks
network  --device=bond0 --onboot=on --noipv4 --noipv6 --activate --bondslaves=${bond_list[1]} --bondopts=${bond_list[2]}
network  --bootproto=static --device=bond0 --onboot=on --gateway=${ip_list[1]} --ip=${ip_list[0]} --nameserver=${ns_list[0]} --netmask=${ip_list[2]} --noipv6 --activate --vlanid=${vlan_list[0]//vlan/} --interfacename=${ip_list[4]}
network  --hostname=${ip_list[3]}
EOF
fi

# Append the remaining common config
cat <<EOF >> /tmp/network.ks
network  --bootproto=dhcp --device=em3 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=em4 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p1p1 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p1p2 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p3p1 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p3p2 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p7p1 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p7p2 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p8p1 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p8p2 --onboot=off --ipv6=auto
EOF

echo "INFO: Contents of /tmp/network.ks"
echo "--------------------------------"
cat /tmp/network.ks
echo "--------------------------------"

# Disk processing to deterine which device to install to.
# Currently 2 methods are supported: 
# 1. If no special parameters are defined when booting into this install, extremely simple logic will be used 
# to determine the first non-removable drive.
# 2. If a parameter is passed to the kernel as `os_device=<device>` that will be used instead.
# This allows either hard coding an sd device like sda or sdb, or more appropriately instead pass a device by id or path.
# Why? For some reason these servers sometimes reorder drives when booting into Anaconda, even with only 1 defined device.
# Here is output from the same server that only has 1 RAID disk defined, but still came up as sda usually, but sdb sometimes,
# and in that case sda was a ghost unknown removable device. After rebooting it was sda again. These would work:
#
# [root@infra-1 ~]# grep "sd[a-z]" dmesg.log
#[   11.580368] ahci 0000:00:11.5: flags: 64bit ncq sntf pm led clo only pio slum part ems deso sadm sds apst
#[   11.609776] ahci 0000:00:17.0: flags: 64bit ncq sntf pm led clo only pio slum part ems deso sadm sds apst
#[   12.416283] sd 0:0:0:1: [sda] Attached SCSI removable disk
#[   12.451686] sd 16:0:0:0: [sdb] 468731008 512-byte logical blocks: (239 GB/223 GiB)
#[   12.454774] sd 16:0:0:0: [sdb] 4096-byte physical blocks
#[   12.456327] sd 16:0:0:0: [sdb] Write Protect is off
#[   12.457785] sd 16:0:0:0: [sdb] Mode Sense: 00 3a 00 00
#[   12.457810] sd 16:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
#[   12.460299] sd 16:0:0:0: [sdb] Attached SCSI disk
#
# In the OS:
#    [root@rhv-3 ~]# lsblk /dev/disk/by-id/ata-DELLBOSS_VD_398d5637b11a0010
#    NAME                 MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
#    sda                    8:0    0 223.5G  0 disk
#    ├─sda1                 8:1    0     1G  0 part /boot
#    └─sda2                 8:2    0 222.5G  0 part
#      ├─rhel_rhv--3-root 253:0    0    50G  0 lvm  /
#      └─rhel_rhv--3-swap 253:1    0     4G  0 lvm  [SWAP]
#    [root@rhv-3 ~]# lsblk /dev/disk/by-path/pci-0000\:af\:00.0-ata-1.0
#    NAME                 MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
#    sda                    8:0    0 223.5G  0 disk
#    ├─sda1                 8:1    0     1G  0 part /boot
#    └─sda2                 8:2    0 222.5G  0 part
#      ├─rhel_rhv--3-root 253:0    0    50G  0 lvm  /
#      └─rhel_rhv--3-swap 253:1    0     4G  0 lvm  [SWAP]

# If no parameter passed, simply look for first non-removable. We could enhanced this by looking at size or other factors.
if [ -z "${os_device}" ]
then
  for device in $(ls -d /sys/block/sd*)
  do
    echo INFO: Checking device "${device}"
    removable=$(cat ${device}/removable)
    if (( ${removable} == 0 ))
    then
      if [ -z ${os_device} ]
      then
        os_device=${device}
        os_device=$(echo ${os_device} | awk -F/ '{ print $4 }')
        echo Device "${os_device}" is first discovered non-removable
        break
      fi
    fi
  done
fi

echo Device "${os_device}" is set as install target device

cat <<EOF >> /tmp/disk.ks
# Disk options
ignoredisk --only-use=${os_device}
# System bootloader configuration
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=${os_device}
autopart --type=lvm --nohome
# Partition clearing information
clearpart --all --initlabel --drives=${os_device}
EOF

echo "INFO: Contents of /tmp/disk.ks"
echo "--------------------------------"
cat /tmp/disk.ks
echo "--------------------------------"

#end raw
%end

%packages
@^minimal
@core
chrony
kexec-tools

%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%post --log /root/kickstart-post-install.log
cat >> /root/kickstart-pre-install.log << "EOF"
%include /tmp/kickstart-pre-install.log
EOF
%end