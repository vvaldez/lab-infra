#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512
firstboot --disable
ignoredisk --only-use=sda
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

eula --agreed
text
reboot

sshkey --username=root "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDK5YWtAy4RbCBn9Mdhj0575ikdY7impF62Sr7RrfVRzlABGx90lZTm0vFJbRe4wpX2E0xEW9lbImjHX/b7f/uEoLy7Z+vsLYhfnbzF/T6AGDtVQliK+Im+i3D2DqU8GU+QockbdLnKYx3b3IiLUn1VrBZhwDovAfqg1uAAkt5NEuaXjPaMPbvb6OTro4phlOjz+2ofqCFVt+7Sx7s6TlTeyMq3tT804hX5QYOrld+MbGEXSE0GhThOGrvYemdfIdGGQFEwF1kYnVrCISfs7pPFDp0rRLQlqYzNBj2hR328uvIn9lboWRl2Cz6wioR3I76cLBJCwiEg1dZNdfdFCQH3 vincent.valdez@APPEARFARMSINCE.workdayinternal.com"

url --url="http://172.17.118.15/rhel7/7.8-x86_64/"

# Network information
%include /tmp/network.ks

# Root password
rootpw --iscrypted $6$Yv6MUaQ60EX1DxAd$rKyTXdEhkG.t3IcYOy6pseoIH88oLfN/BqFyAGpVdZBBD2NAziJ37Lvj.85O2ygUJGsFxhxrUR/YWlEzWLQF51
# System services
services --enabled="chronyd"
# System timezone
timezone America/New_York --isUtc
# System bootloader configuration
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=sda
autopart --type=lvm --nohome
# Partition clearing information
clearpart --all --initlabel --drives=sda

%pre --log=/tmp/kickstart-pre-install.log
#!/bin/sh

# Process kernel cmdline to see if what was passed to ip= bond= and vlan= so all of these can be processed 
# Looking for boot options as describd here: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/installation_guide/chap-anaconda-boot-options
#  bond=bond0:em1,em2:mode=802.3ad vlan=vlan118:bond0 ip=172.17.118.33::172.17.118.254:255.255.255.0:myhost.example.com:vlan118:none nameserver=8.8.8.8

#raw
# Get the kernel parameters
kparams=$(cat /proc/cmdline)
# Create array with parameters
kp_list=(${kparams// / })
for p in "${kp_list[@]}"
do
  case $p in
    ip*)
      ip_list=(${p//ip=/})
      ip_list=(${ip_list//:/ })
      ;;
    bond*)
      bond_list=(${p//bond=/})
      bond_list=(${bond_list//:/ })
      ;;
    vlan*)
      vlan_list=(${p//vlan=/})
      vlan_list=(${vlan_list//:/ })
      ;;
    nameserver*)
      ns_list=(${p//nameserver=/})
      ;;
  esac
done

echo "INFO: variables passed in:"
echo "kparams: ${kp_list[@]}"
echo "ip: ${ip_list[@]}"
echo "    addr: ${ip_list[0]}"
echo "    gateway: ${ip_list[2]}"
echo "    netmask: ${ip_list[3]}"
echo "    hostname: ${ip_list[4]}"
echo "nameserver: ${ns_list[@]}"
echo "bond: ${bond_list[@]}"
echo "    interface: ${bond_list[0]}"
echo "    slaves: ${bond_list[1]}"
echo "    options: ${bond_list[2]}"
echo "vlan: ${vlan_list[@]}"
echo "    id: ${vlan_list[0]//vlan/}"

if [ -z "${ip_list[0]}" ]
then
  # If not ip= parameter sent, use dhcp
  # TODO: for non-specified bond slaves, em1 and em2 are assumed, and mode=802.3ad - these should be dynamic instead
  cat <<EOF > /tmp/network.ks
network  --bootproto=dhcp --device=bond0 --onboot=on --noipv4 --noipv6 --activate --bondslaves=em2,em1 --bondopts=downdelay=0,miimon=1,mode=802.3ad,updelay=0
network  --bootproto=dhcp --device=bond0 --onboot=on --noipv6 --activate --vlanid=118 --interfacename=vlan118
network  --hostname=localhost.localdomain
EOF
else
  # Use information passed to installer to configure network
  cat <<EOF > /tmp/network.ks
network  --device=bond0 --onboot=on --noipv4 --noipv6 --activate --bondslaves=${bond_list[1]} --bondopts=${bond_list[2]}
network  --bootproto=static --device=bond0 --onboot=on --gateway=${ip_list[1]} --ip=${ip_list[0]} --nameserver=${ns_list[0]} --netmask=${ip_list[2]} --noipv6 --activate --vlanid=${vlan_list[0]//vlan/} --interfacename=${ip_list[4]}
network  --hostname=${ip_list[3]}
EOF
fi

# Append the remaining common config
cat <<EOF >> /tmp/network.ks
network  --bootproto=dhcp --device=em3 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=em4 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p1p1 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p1p2 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p3p1 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p3p2 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p7p1 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p7p2 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p8p1 --onboot=off --ipv6=auto
network  --bootproto=dhcp --device=p8p2 --onboot=off --ipv6=auto
EOF
#end raw

echo "INFO: Contents of /tmp/network.ks"
echo "--------------------------------"
cat /tmp/network.ks
echo "--------------------------------"
%end

%packages
@^minimal
@core
chrony
kexec-tools

%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

%post --log /root/kickstart-post-install.log
cat >> /root/kickstart-pre-install.log << "EOF"
%include /tmp/kickstart-pre-install.log
EOF
%end